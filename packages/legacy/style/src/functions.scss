$root: 16px;
/** Map Functions **/
// get a value from a map, throw an error if it doesn't exist
@function map-get-strict($map, $key) {
    @if map-has-key($map, $key) {
        @return map-get($map, $key);
    }

    @error "ERROR: Key '#{$key}' does not exist in the map";
}
/** Number Functions **/
// strip the units from a number
@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}

/** Conversion Functions **/
// convert the number into em
@function to-em($n, $c: $root) {
    @if unit($n) ==rem {
        @return $n * 1em/1rem;
    } @else if unit($n) ==em {
        @return $n;
    } @else if unit($n) ==px {
        @return ($n/$c) * 1em;
    }

    @error "Unit is not supported. Must be px, em, rem";
}

// convert the number into rem
@function to-rem($n, $c: $root) {
    @if unit($n) ==rem {
        @return $n;
    } @else if unit($n) ==em {
        @return $n * 1rem/1em;
    } @else if unit($n) ==px {
        @return ($n/$c) * 1rem;
    }

    @error "Unit is not supported. Must be px, em, rem";
}

// convert the number into rem
@function to-px($n, $c: $root) {
    @if unit($n) ==rem {
        @return ($n/1rem) * $c;
    } @else if unit($n) ==em {
        @return ($n/1em) * $c;
    } @else if unit($n) ==px {
        @return $n;
    }

    @error "Unit is not supported. Must be px, em, rem";
}

// scale the $target in the $original content to be the same size in the $updated context
@function rescale($target, $original, $updated) {
    @return ($target) * strip-unit($original) / strip-unit($updated);
}

/** Size Functions **/
// get a size from the map and return it in the correct unit
@function getter($map, $s, $unit) {
    @if $unit==rem {
        @return to-rem(map-get-strict($map, $s));
    } @else if $unit==em {
        @return to-em(map-get-strict($map, $s));
    }

    @error "Unit is not valid. Must be em or rem";
}

// get the height
@function get-height($s, $unit) {
    @return getter($height, $s, $unit);
}

// get the width
@function get-width($s, $unit) {
    @return getter($width, $s, $unit);
}

// get the spacing
@function get-spacing($s, $unit) {
    @return getter($spacing, $s, $unit);
}

// get the font size
@function get-font-size($s, $unit) {
    @return getter($font-size, $s, $unit);
}

// get the font weight
@function get-font-weight($w: 'regular') {
    @return map-get-strict($font-weight, $w);
}

/** Color Functions **/

// convert rgba to rgb
@function rgba-to-rgb($rgba, $background: #ffffff) {
    @return mix(
        rgb(red($rgba), green($rgba), blue($rgba)),
        $background,
        alpha($rgba) * 100%
    );
}

// get the text color
@function get-text-color($c) {
    @return map-get-strict($text-color, $c);
}

// get the background color
@function get-background-color($c) {
    @return map-get-strict($background-color, $c);
}

// get the gradient color
@function get-gradient-color($c) {
    @return map-get-strict($gradient-color, $c);
}

// get the border color
@function get-border-color($c) {
    @return map-get-strict($border-color, $c);
}

// get the outline color
@function get-outline-color($c) {
    @return map-get-strict($border-color, $c);
}

// get the scroll color
@function get-scroll-color($c) {
    @return map-get-strict($scroll-color, $c);
}

// get the accent color
@function get-accent-color($c) {
    @return map-get-strict($accent-color, $c);
}

/** Box Shadow Functions **/
// get the box shadow value
@function get-box-shadow($s, $c) {
    @return unquote(
        map-get-strict($box-shadow-size, $s) + ' ' +
            map-get-strict($box-shadow-color, $c)
    );
}
